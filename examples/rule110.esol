type Cell { . # }

run Entry { % . . . . . . . . . . . . . . . # . & 1 1 1 1 1 1 1 1 1 1 1 1 1 0 }

case Entry % % ! I
case I % % -> I

var a     : Cell case I       a a -> (I a)
var a b   : Cell case (I a)   b b -> (I a b)
var a b c : Cell case (I a b) c c <- (R a b c)
var a b   : Cell case (I a b) & & .  Print

case Print & & ! Dec

case Dec 0 0 <- Dec1
var _ : { 1 & } case Dec _ _ -> Dec
case Dec1 1 0 <- Reset
case Dec1 & & . Halt

case Reset % % -> I
var _ : Cell + { 1 & } {
	case Reset _ _ <- Reset
}

var _ : Cell {
	case (R . . .) _ . -> (I .)
	case (R . . #) _ # -> (I .)
	case (R . # .) _ # -> (I #)
	case (R . # #) _ # -> (I #)
	case (R # . .) _ . -> (I .)
	case (R # . #) _ # -> (I .)
	case (R # # .) _ # -> (I #)
	case (R # # #) _ . -> (I #)
}

