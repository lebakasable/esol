let Bits { . # }

case Entry & & -> I

for a in Bits case I a a -> (I a)
for a in Bits for b in Bits case (I a) b b -> (I a b)
for a in Bits for b in Bits for c in Bits case (I a b) c c <- (R a b c)
for a in Bits for b in Bits case (I a b) & & . Print

case Print & & ! Reset1
case Reset1 & & <- Reset
for a in Bits case Reset a a <- Reset
case Reset & & -> I

for _ in Bits case (R . . .) _ . -> (I .)
for _ in Bits case (R . . #) _ # -> (I .)
for _ in Bits case (R . # .) _ # -> (I #)
for _ in Bits case (R . # #) _ # -> (I #)
for _ in Bits case (R # . .) _ . -> (I .)
for _ in Bits case (R # . #) _ # -> (I .)
for _ in Bits case (R # # .) _ # -> (I #)
for _ in Bits case (R # # #) _ . -> (I #)
