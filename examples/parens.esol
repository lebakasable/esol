type Open  { '(' '[' '{' }
type Close { ')' ']' '}' }
type Paren Open + Close

//trace Entry { % '[' '(' ')' ']' '{' '}' & . }
trace Entry { % ']' & . }

case Entry % % -> Pick

case Pick & & -> Verify

var p : Open case Verify p p . (Unbalanced Overflow)
case Verify . . . Balanced

var p   : Paren case Pick     p % -> (Pick p)
var p q : Paren case (Pick p) q q -> (Pick p)
var p   : Paren case (Pick p) & & -> (Update p)

var p q : Open case (Update p) q q -> (Update p)
var p   : Open case (Update p) . p <- Entry

var p : Close
var q : Open
case (Update p) q q -> (Update p)

var p : Close
case (Update p) . . <- (Pop p)

var p : Close
case (Pop p) & & . (Unbalanced Underflow)

case (Pop ')') '(' . <- Entry
case (Pop ']') '[' . <- Entry
case (Pop '}') '{' . <- Entry

var p : Close
var q : Open
case (Pop p) q q . (Unbalanced Mismatch q p)

var _ : Paren + { & } case Entry _ _ <- Entry
